addLegend(colors = color_palette(11),
labels = round(seq(0, 1, by = 0.1), 2),
title = "g", opacity = 1)
mm
View(pred_data)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, color = id)  +
layer_spatial(data = pred_path, color = id) #+
library(ggspatial)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, color = id)  +
layer_spatial(data = pred_path, color = id) #+
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg')
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, color = id)  +
layer_spatial(data = pred_path, color = id) #+
View(pred_data)
View(pred_path)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data) +
layer_spatial(data = pred_path) #+
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path) #+
View(pred_data)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path, aes(color = id)) #+
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path, aes(color = id)) +
transition_time(DATETIME)
library(gganimate)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path, aes(color = id)) +
transition_time(DATETIME)
View(pred_data)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path, aes(color = id)) +
transition_time(date)
View(pred_data)
View(tagdat)
View(pred_data)
# Load the whale shark data using the 'read.csv' function directly from github
whaleshark <- read.csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/data/Whaleshark.csv', header = TRUE)
View(whaleshark)
summary(whaleshark) # Provides a summary of the data frame
class(whaleshark) # tells us what form 'whaleshark' is in (data frame)
# Now lets explore what form each of our columns are in
class(whaleshark$ANIMALID) # character
class(whaleshark$DATE) # character
class(whaleshark$LONGITUDE) # numeric
class(whaleshark$LATITUDE) # numeric
class(whaleshark$ARGOSCLASS) # character
#First, lets load up lubridate using the library package.
library(lubridate)
# Now we can use the 'ymd_hms' function to reformat our 'DATE' field as a POSIXct.
whaleshark$DATE <- ymd_hms(whaleshark$DATE)
# Or we can use the parse_date_time function
whaleshark$DATE <- parse_date_time(whaleshark$DATE, "Ymd HMS")
# We can check if it worked by using the class function
class(whaleshark$DATE)
# Lets practice by creating a new field with the time zone as the local time (Indian Ocean/Maldives UTC +5:00).
whaleshark$LOCAL_DATE_TIME <- with_tz(whaleshark$DATE, tzone = "Indian/Maldives")
whaleshark$date <- date(whaleshark$DATE) # Create a new column with only date
whaleshark$time <- format(whaleshark$DATE, "%H:%M:%S") # create a new column with only time
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
# You can also use read_csv to input data directly from a website URL
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/data/Whaleshark.csv')
whaleshark %>% class() # In English: take the 'whaleshark' data frame and run the class function on it.
whaleshark %>% View() # opens data in a new window
whaleshark %>% head() # first 6 rows by default
whaleshark %>% tail(10) # specify we want to look at the last 10 rows
whaleshark %>% nrow() # number of rows in the data frame
whaleshark %>% ncol() # number of columns in the data frame
whaleshark %>% str() # provides internal structure of an R object
whaleshark %>% summary() # provides result summary of the data frame
whaleshark %>% View() # opens data in a new window
whaleshark %>% head() # first 6 rows by default
whaleshark %>% tail(10) # specify we want to look at the last 10 rows
whaleshark %>% nrow() # number of rows in the data frame
whaleshark %>% ncol() # number of columns in the data frame
whaleshark %>% str() # provides internal structure of an R object
whaleshark %>% summary() # provides result summary of the data frame
whaleshark$DATE %>% class()
whaleshark %>%
subset(ANIMALID == "M-150") %>% # subset dataset to include only the whale shark 'M-150'
nrow() # count number of rows (i.e. detections) from 'M-150'
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
plot <- whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
ggsave("M150_overtime.png", plot, path = '/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/')
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("M150_detections.png", path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("M150_detections.png", path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/M150_detections.png")
dev.off()
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/M150_detections.png")
dev.off()
getwd()
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("/images/session_1/M150_detections.png")
dev.off()
getwd()
png("M150_detections.png")
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("M150_detections.png")
dev.off()
getwd()
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
file_path <- file.path("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/M150_detections.png")
png(file_path)
dev.off()
library(dplyr)
rm("file_path")
rm("plot")
whaleshark %>%
dplyr::select(ANIMALID, DATE, LONGITUDE, LATITUDE)# %>% # columns we want to include
# as an example, we could filter to look at the detections of only one of our whale sharks
whaleshark %>%
filter(ANIMALID == 'M-150') %>%
arrange(DATE) # arrange M-150's detections in chronological order
whaleshark %>%
group_by(ANIMALID) %>%
summarise(NumDetections = n()) # summarise number of detections per tagged shark
whaleshark <-
whaleshark %>%
rename(DATETIME = DATE) %>% # change the name of our DATETIME column
mutate(DATE = as.Date(DATETIME)) %>% # add a column to the whale shark data with just date of each detection
mutate(TIME = format(DATETIME, format = "%H:%M:%S")) # add a column for just time
library(ggplot2)
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
plot <- whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
ggsave("2_DetectionsBoxplot.png", plot, path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, scale = 1,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 6,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
plot <- whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag ID") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 5,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
plot <- whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Animal ID") + ylab("Number of detections per day") +
geom_boxplot() + # define the geometric object (how to plot it).. in this case a boxplot
theme(legend.position = "none")
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 5,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 6,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, width = 7, height = 5,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 5,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Animal ID") + ylab("Number of detections per day") +
geom_boxplot() + # define the geometric object (how to plot it).. in this case a boxplot
theme(legend.position = "none")
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Tag") +
geom_point()
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Tag") +
geom_point() +
labs(fill = "Animal ID")
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Animal ID") +
geom_point() +
theme(legend.position = "none")
plot <-whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Animal ID") +
geom_point() +
theme(legend.position = "none")
ggsave("3_DetectionsAbacus.png", plot, width = 8, height = 5, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
library(sf)
rm("plot")
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 4326, remove = F)
head(whaleshark_sf)
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf()
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
labs(xlab = "Longitude", ylab = "Latitutde")
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
labs(x = "Longitude", y = "Latitutde")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
plot <- ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
labs(x = "Longitude", y = "Latitutde")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 7, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, width = 6, height = 5, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 7, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
whaleshark_path <-
whaleshark_sf %>%
group_by(ANIMALID) %>% #Group by animal ID so that each animal has it's own unique path
arrange(DATETIME) %>% # arrange by the date to ensure data are in the correct sequence
summarise(do_union = FALSE) %>%
st_cast("LINESTRING") # converts our points sf to a path sf
ggplot() +
geom_sf(data = whaleshark_sf, aes(color = ANIMALID)) +
geom_sf(data = whaleshark_path, aes(color = ANIMALID))
ggplot() +
geom_sf(data = whaleshark_sf, aes(color = ANIMALID)) +
geom_sf(data = whaleshark_path, aes(color = ANIMALID)) +
labs(x = "Longitude", y = "Latitutde")
plot <- ggplot() +
geom_sf(data = whaleshark_sf, aes(color = ANIMALID)) +
geom_sf(data = whaleshark_path, aes(color = ANIMALID)) +
labs(x = "Longitude", y = "Latitutde")
ggsave("5_SpatialDetections_Path.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
library(ggspatial)
M150_sf <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
M150_path <-
M150_sf %>%
arrange(DATETIME) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
ggplot() +
annotation_map_tile(type = "osm") +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path)
ggplot() +
annotation_map_tile(type = "osm") +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
plot <- ggplot() +
annotation_map_tile(type = "osm") +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
ggsave("6_M150_SpatialDetections_Map.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path)
plot <-ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path)
ggsave("7_M150_SpatialDetections_Carto.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
plot <-ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
ggsave("7_M150_SpatialDetections_Carto.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg')
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white')
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
labs(x = "Longitude", y = "Latitude")
plot <- ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
labs(x = "Longitude", y = "Latitude")
ggsave("8_M150_SpatialDetections_EsriSat.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
esri_topo <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Topo_Map/MapServer/tile/${z}/${y}/${x}.jpeg')
ggplot() +
annotation_map_tile(type = esri_topo, zoom = 8) +
layer_spatial(data = M150_sf)  +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
plot<- ggplot() +
annotation_map_tile(type = esri_topo, zoom = 8) +
layer_spatial(data = M150_sf)  +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
ggsave("9_M150_SpatialDetections_EsriTopo.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggplot() +
annotation_map_tile(type = 'osm', zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
annotation_scale() +
theme(legend.position = "bottom")
plot <- ggplot() +
annotation_map_tile(type = 'osm', zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
annotation_scale() +
theme(legend.position = "bottom")  +
labs(x = "Longitude", y = "Latitude")
ggsave("10_M150_SpatialDetections_Osm_Scale.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
library(gganimate)
ggplot() +
annotation_map_tile(type = esri_sat) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'red') +
annotation_scale(text_col = "white") +
transition_time(DATETIME)
ggplot() +
annotation_map_tile(type = esri_sat) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'red') +
annotation_scale(text_col = "white") +
transition_time(DATETIME) +
labs(x = "Longitude", y = "Latitude")
plot <- ggplot() +
annotation_map_tile(type = esri_sat) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'red') +
annotation_scale(text_col = "white") +
transition_time(DATETIME) +
labs(x = "Longitude", y = "Latitude")
anim_save("11_M150_Spatial_animate.gif", plot)
anim_save("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/11_M150_Spatial_animate.mp4", plot)
anim_save("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/11_M150_Spatial_animate.mp4", plot,
renderer = ffmpeg_renderer())
ggplot() +
annotation_map_tile(type = esri_sat) +
geom_spatial_path(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'white')  +
geom_spatial_point(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'red') +
annotation_scale(text_col = "white") +
labs(x = NULL, y = NULL) +
transition_reveal(DATETIME)
ggplot() +
annotation_map_tile(type = esri_sat) +
geom_spatial_path(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'white')  +
geom_spatial_point(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'red') +
annotation_scale(text_col = "white") +
labs(x = NULL, y = NULL) +
transition_reveal(DATETIME) +
labs(x = "Longitude", y = "Latitude")
plot <- ggplot() +
annotation_map_tile(type = esri_sat) +
geom_spatial_path(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'white')  +
geom_spatial_point(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'red') +
annotation_scale(text_col = "white") +
transition_reveal(DATETIME) +
labs(x = "Longitude", y = "Latitude")
anim_save("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/12_M150_Spatial_Animate2.gif", plot)
anim_save("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/12_M150_Spatial_Animate2.mp4", plot)
library(mapview)
whaleshark_paths <-
whaleshark_sf %>%
arrange(DATETIME) %>%
group_by(ANIMALID) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
mapview(whaleshark_sf)
mapview(whaleshark_paths)
map1<-
mapview(whaleshark_sf,
zcol = "ANIMALID",
burst = T,
map.types = "Esri.WorldImagery",
legend = F,
homebutton = F,
cex = 5) +
mapview(whaleshark_paths,
zcol = "ANIMALID",
burst = T,
legend = F,
homebutton = F)
map1
map1@object
map1@map
mapview::mapviewOptions(fgb = FALSE) # If set to TRUE, mapview uses the 'new' way of rendering, which embeds data directly in the html. This is really helpful when attempting to visualize large datasets as it reduces the memory footprint. However, this
map1<-
mapview(whaleshark_sf,
zcol = "ANIMALID",
burst = T,
map.types = "Esri.WorldImagery",
legend = F,
homebutton = F,
cex = 5) +
mapview(whaleshark_paths,
zcol = "ANIMALID",
burst = T,
legend = F,
homebutton = F)
map1@map
library(leaflet)
map2 <-
map1@map %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F)) %>%
hideGroup(unique(whaleshark_sf$ANIMALID))
map2
mapview::mapviewOptions(fgb = FALSE) # If set to TRUE, mapview uses a file format called flatgeobuf (fgb). FGB allows the resultant map to load faster because the html output doesn't contain the data directly, moreso a snapshot of the data. This is super handy when working with large datasets! The trade off is that this optimization can sometimes leads to issues with mapping. If you're curious go ahead and try the following maps with 'fgb = TRUE' and 'fgb = FALSE' to see the difference for yourself!
mapview::mapshot(map1, url = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/13_Spatial_Interactive.html", remove_controls = NULL, selfcontained = TRUE)
mapview::mapshot(map1, url = "Spatial_Interactive.html", remove_controls = NULL, selfcontained = TRUE)
map1@object
map1@map
library(leaflet)
mapview::mapshot(map2, url = "14_Spatial_Interactive2.html", remove_controls = NULL, selfcontained = TRUE)
track <- ggplot() +
annotation_map_tile(type = esri_sat) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'red') +
annotation_scale(text_col = "white") +
transition_time(DATETIME) +
labs(x = "Longitude", y = "Latitude")
anim <- animate(track, width = 7, height = 5, units = "in", res = 250, nframes = 250, fps = 50,
render = gifski_renderer(loop = FALSE))
save_animation(animation = anim, file = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/11_M150_Spatial_animate.gif")
track <- ggplot() +
annotation_map_tile(type = esri_sat) +
geom_spatial_path(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'white')  +
geom_spatial_point(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'red') +
annotation_scale(text_col = "white") +
transition_reveal(DATETIME) +
labs(x = "Longitude", y = "Latitude")
anim <- animate(track, width = 7, height = 5, units = "in", res = 250, nframes = 250, fps = 50,
render = gifski_renderer(loop = FALSE))
save_animation(animation = anim, file = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/12_M150_Spatial_animate2.gif")
