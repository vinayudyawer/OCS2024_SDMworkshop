map1@object
map1@map
map1@object
library(leaflet)
map2 <-
map1 %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F)) %>%
hideGroup(unique(whaleshark_sf$ANIMALID)
)
map1 %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F)) %>%
hideGroup(unique(whaleshark_sf$ANIMALID)
)
map1 %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F)) %>%
hideGroup(unique(whaleshark_sf$ANIMALID))
map1 %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F))# %>%
map1<-
mapview(whaleshark_sf,
alpha.reg = 0.5,
alpha = 1,
color = grey,
fill = grey,
map.types = "Esri.WorldImagery",
legend = F,
home.button = F,
cex = 5)
map1 %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F))# %>%
map1 %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID))# %>%
map1@map %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F))# %>%
map1@map %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F)) %>%
hideGroup(unique(whaleshark_sf$ANIMALID))
IDcols <- c("#0cb2af", "#a1c65d", "#fac723", "#f29222", "#e95e50", "#936fac")
names(IDcols) <- c("M-111", "M-129", "M-130", "M-149", "M-150", "M-156")
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
scale_color_manual(values = IDcols)
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
scale_color_manual(values = IDcols) +
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
scale_color_manual(values = IDcols) +
xlab("Date") + ylab("Tag") +
geom_point()
ggplot() +
annotation_map_tile(type = "osm", zoom = 10) +
layer_spatial(data = whaleshark_sf,aes(color = ANIMALID)) +
scale_color_manual(values = IDcols)
# Load the whale shark data using the 'read.csv' function directly from github
whaleshark <- read.csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv', header = TRUE)
View(whaleshark)
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
library(tidyverse)
library(aniMotum)
raw_data <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
# Using transmute from the Dplyr package
tagdat <- raw_data %>%
dplyr::transmute(id = ANIMALID,
date = DATE,
lc= ARGOSCLASS,
lon = LONGITUDE,
lat = LATITUDE)
tagdat %>%
group_by(id, lc) %>%
summarise(num_pos = n()) %>%
ggplot(aes(x = id, y = num_pos, fill = lc)) +
geom_col(position = "fill") +
labs(x = "Tag ID", y = "Proportion of fixes", fill = "Location\nClass") +
theme_bw()
fit <-
fit_ssm(x = tagdat,
vmax = 1.5, ## maximum speed of whale sharks (in m/s)
model = "mp", ## Move persistence model
time.step = 24) ## predict positions every 24 hours
View(fit)
View(fit)
# Load the whale shark data using the 'read.csv' function directly from github
whaleshark <- read.csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv', header = TRUE)
summary(whaleshark)
whaleshark %>% summary()
# We can use the summary() funcation
summary(whaleshark)
class(whaleshark)
# Now lets explore what form each of our columns are in
class(whaleshark$ANIMALID) # character
class(whaleshark$DATE) # character when read.csv but POSIXct when read_csv... INTERESTING.
class(whaleshark$LONGITUDE) # numeric
class(whaleshark$LATITUDE) # numeric
class(whaleshark$ARGOSCLASS) # character
class(whaleshark$DATE) # character when read.csv but POSIXct when read_csv... INTERESTING.
?LUBRIDATE
?lubridate()
?lubridate
??lubridate
#First, lets load up lubridate using the library package.
library(lubridate)
# Now we can use the 'ymd_hms' function to tell R what format our 'DATE' field is in.
whaleshark$DATE <- ymd_hms(whaleshark$DATE)
View(whaleshark)
# We can check if it worked by using the class function
class(whaleshark$DATE)
whaleshark$LOCAL_DATE_TIME <- with_tz(DATE, tzone = "Australia/Brisbane")
whaleshark$LOCAL_DATE_TIME <- with_tz(whaleshark$DATE, tzone = "Australia/Brisbane")
whaleshark$date <- date(whaleshark$DATE)
whaleshark$date <- time(whaleshark$DATE)
whaleshark$time <- time(whaleshark$DATE)
whaleshark$date <- date(whaleshark$DATE)
View(whaleshark)
?time()
whaleshark$time <- hms(format(whaleshark$DATE, "%H:%M:%S"))
whaleshark$time <- hms(format(whaleshark$DATE, "%H:%M:%S"))
View(whaleshark)
View(whaleshark)
whaleshark$time <- hms(format(whaleshark$DATE, "%h:%m:%s"))
whaleshark$time <- hms(whaleshark$DATE, "%H:%M:%S")
whaleshark$time <- hms(format(whaleshark$DATE, "%H:%M:%S"))
whaleshark$time <- format(whaleshark$DATE, "%H:%M:%S")
whaleshark$time <- format(whaleshark$DATE, "%H:%M:%S")
whaleshark$time <- format(whaleshark$DATE, "%T")
whaleshark$time <- format(whaleshark$DATE, "%T")
# We can check if it worked by using the class function
class(whaleshark$DATE)
class(whaleshark$date)
# Load the whale shark data using the 'read.csv' function directly from github
whaleshark <- read.csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv', header = TRUE)
whalshark$DATE_TIME <- as.POSIXct(whaleshark$DATE, format = '%Y-%m-%dT%H:%M:%SZ') #change detection date
whaleshark$DATE_TIME <- as.POSIXct(whaleshark$DATE, format = '%Y-%m-%dT%H:%M:%SZ') #change detection date
whaleshark$DATE_TIME <- as.POSIXct(whaleshark$DATE, format = '%Y-%m-%d %H:%M:%SZ') #change detection date
whaleshark$DATE_TIME <- as.POSIXct(whaleshark$DATE, format = '%Y-%M-%D %H:%M:%SZ') #change detection date
View(whaleshark)
whaleshark$DATE_TIME <- as.POSIXct(whaleshark$DATE, format = '"%Y-%m-%d %H:%M:%OS"') #change detection date
whaleshark$DATE_TIME <- as.POSIXct(whaleshark$DATE, format = '"%Y-%m-%dT%H:%M:%OS"') #change detection date
# Now we can use the 'ymd_hms' function to reformat our 'DATE' field as a POSIXct.
whaleshark$DATE <- ymd_hms(whaleshark$DATE)
# We can check if it worked by using the class function
class(whaleshark$DATE)
whaleshark$date <- date(whaleshark$DATE)
parse_date_time(whaleshark$DATE)
parse_date_time(whaleshark$DATEm "Ymd HMS")
parse_date_time(whaleshark$DATE, "Ymd HMS")
whaleshark$DATE_TIME <- parse_date_time(whaleshark$DATE, "Ymd HMS")
# Load the whale shark data using the 'read.csv' function directly from github
whaleshark <- read.csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv', header = TRUE)
whaleshark$DATE_TIME <- parse_date_time(whaleshark$DATE, "Ymd HMS")
View(whaleshark)
View(whaleshark)
whaleshark$time <- format(whaleshark$DATE_TIME, "%H:%M:%S")
# You can also use read_csv to input data directly from a website URL
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
whaleshark %>% class()
whaleshark %>% View()
whaleshark %>% View() # opens data in a new window
whaleshark %>% head() # first 6 rows by default
whaleshark %>% tail(10) # specify we want to look at the last 10 rows
whaleshark %>% nrow() # number of rows in the data frame
whaleshark %>% ncol() # number of columns in the data frame
whaleshark %>% str() # provides internal structure of an R object
whaleshark %>% summary() # provides result summary of the data frame
# pipes can be used for single column within data frames
whaleshark$DATE %>% class()
whaleshark %>%
subset(ANIMALID == "M-150") %>% # subset dataset to include only the whale shark 'M-150'
nrow() # number of rows (i.e. detections) from 'M-150'
whaleshark %>%
mutate(date = as.date(DATE_TIME))
whaleshark %>%
mutate(date = date(DATE_TIME))
whaleshark %>%
mutate(date = date(DATE))
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date))
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot()
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = p)
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'p')
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b')
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections") # plot detections over time
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
Filter and arrange
# Load the whale shark data using the 'read.csv' function directly from github
whaleshark <- read.csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv', header = TRUE)
summary(whaleshark) # Provides a summary of the data frame
class(whaleshark) # tells us what form 'whaleshark' is in (data frame)
# Now lets explore what form each of our columns are in
class(whaleshark$ANIMALID) # character
class(whaleshark$DATE) # character
class(whaleshark$LONGITUDE) # numeric
class(whaleshark$LATITUDE) # numeric
class(whaleshark$ARGOSCLASS) # character
#First, lets load up lubridate using the library package.
library(lubridate)
# Now we can use the 'ymd_hms' function to reformat our 'DATE' field as a POSIXct.
whaleshark$DATE <- ymd_hms(whaleshark$DATE)
# We can check if it worked by using the class function
class(whaleshark$DATE)
# Lets practice by creating a new field with the time zone as AEST.
whaleshark$LOCAL_DATE_TIME <- with_tz(whaleshark$DATE, tzone = "Australia/Brisbane")
whaleshark$date <- date(whaleshark$DATE) # Create a new column with only date
whaleshark$time <- format(whaleshark$DATE, "%H:%M:%S") # create a new column with only time
View(whaleshark)
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
# You can also use read_csv to input data directly from a website URL
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
whaleshark %>% class()
whaleshark %>% View() # opens data in a new window
whaleshark %>% head() # first 6 rows by default
whaleshark %>% tail(10) # specify we want to look at the last 10 rows
whaleshark %>% nrow() # number of rows in the data frame
whaleshark %>% ncol() # number of columns in the data frame
whaleshark %>% str() # provides internal structure of an R object
whaleshark %>% summary() # provides result summary of the data frame
# pipes can be used for single column within data frames
whaleshark$DATE %>% class()
whaleshark %>%
subset(ANIMALID == "M-150") %>% # subset dataset to include only the whale shark 'M-150'
nrow() # count number of rows (i.e. detections) from 'M-150'
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
library(dplyr)
whaleshark %>%
dplyr::select(ANIMALID, DATE, LONGITUDE, LATITUDE, ARGOSCLASS)# %>% # columns we want to include
head(whaleshark) # look at our subsetted data
# as an example, we could filter to look at the detections of only one of our whale sharks
whaleshark %>%
filter(ANIMALID == 'M-150') %>%
arrange(DATE) # arrange M-150's detections in chronological order
whaleshark %>%
group_by(ANIMALID) %>%
summarise(NumDetections = n()) # summarise number of detections per tagged shark
whaleshark <-
whaleshark %>%
rename(DATETIME = DATE) %>%
mutate(DATE = as.Date(DATETIME)) %>% # adding a column to the whale shark data with just date of each detection
mutate(TIME = format(DATETIME, format = "%H:%M:%S"))
library(ggplot2)
IDcols <- c("#0cb2af", "#a1c65d", "#fac723", "#f29222", "#e95e50", "#936fac")
names(IDcols) <- c("M-111", "M-129", "M-130", "M-149", "M-150", "M-156")
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
scale_color_manual(values = IDcols) +
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
scale_color_manual(values = IDcols) +
xlab("Date") + ylab("Tag") +
geom_point()
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
scale_color_manual(values = IDcols) +
xlab("Date") + ylab("Tag") +
geom_point()
whaleshark <-
read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 3577, remove = F)
library(sf)
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 3577, remove = F)
head(whaleshark_sf)
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf()
library(ggspatial)
ggplot() +
annotation_map_tile(type = "osm", zoom = 10) +
layer_spatial(data = whaleshark_sf,aes(color = ANIMALID)) +
scale_color_manual(values = IDcols)
M150 <- whaleshark_sf %>%
filter(ANIMALID == 'M-150') %>%
ggplot()
M150 <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
M150_sf <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
ggplot() +
annotation_map_tile(type = "osm", zoom = 10) +
layer_spatial(data = M150_sf,aes(color = ANIMALID)) +
scale_color_manual(values = IDcols)
ggplot() +
annotation_map_tile(type = "osm", zoom = 10) +
layer_spatial(data = M150_sf) +
scale_color_manual(values = IDcols)
ggplot() +
annotation_map_tile(type = "osm", zoom = 10) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "osm", zoom = 15) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "osm", zoom = 5) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "osm", zoom = 6) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "osm", zoom = 7) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "osm", zoom = 8) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "cartolight", zoom = 9) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "cartolight", zoom = 10) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "cartolight", zoom = 7) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf)
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg') # Same link as singapore workshop
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, aes(color = 'white'))
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')
esri_topo <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Topo_Map/MapServer/tile/${z}/${y}/${x}.jpeg')
ggplot() +
annotation_map_tile(type = esri_topo, zoom = 8) +
layer_spatial(data = cb_stations)
ggplot() +
annotation_map_tile(type = esri_topo, zoom = 8) +
layer_spatial(data = M150_sf)
View(M150_sf)
ggplot() +
annotation_map_tile(type = esri_topo, zoom = 8) +
layer_spatial(data = M150_sf) +
annotation_scale() +
theme(legend.position = "bottom")
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf) +
annotation_scale() +
theme(legend.position = "bottom")
ggplot() +
annotation_map_tile(type = osm, zoom = 8) +
layer_spatial(data = M150_sf) +
annotation_scale() +
theme(legend.position = "bottom")
ggplot() +
annotation_map_tile(type = 'osm', zoom = 8) +
layer_spatial(data = M150_sf) +
annotation_scale() +
theme(legend.position = "bottom")
View(M150_sf)
View(M150_sf)
View(whaleshark)
View(whaleshark_sf)
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
```
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
coord_sf(xlim = c(min_longitude, max_longitude), ylim = c(min_latitude, max_latitude))
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
coord_sf(xlim = c(73, 99), ylim = c(-12, 3))
# Load the whale shark data using the 'read.csv' function directly from github
whaleshark <- read.csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv', header = TRUE)
summary(whaleshark) # Provides a summary of the data frame
class(whaleshark) # tells us what form 'whaleshark' is in (data frame)
# Now lets explore what form each of our columns are in
class(whaleshark$ANIMALID) # character
class(whaleshark$DATE) # character
class(whaleshark$LONGITUDE) # numeric
class(whaleshark$LATITUDE) # numeric
class(whaleshark$ARGOSCLASS) # character
# Now lets explore what form each of our columns are in
class(whaleshark$ANIMALID) # character
class(whaleshark$DATE) # character
class(whaleshark$LONGITUDE) # numeric
class(whaleshark$LATITUDE) # numeric
class(whaleshark$ARGOSCLASS) # character
#First, lets load up lubridate using the library package.
library(lubridate)
# Now we can use the 'ymd_hms' function to reformat our 'DATE' field as a POSIXct.
whaleshark$DATE <- ymd_hms(whaleshark$DATE)
# We can check if it worked by using the class function
class(whaleshark$DATE)
# Lets practice by creating a new field with the time zone as AEST.
whaleshark$LOCAL_DATE_TIME <- with_tz(whaleshark$DATE, tzone = "Australia/Brisbane")
whaleshark$date <- date(whaleshark$DATE) # Create a new column with only date
whaleshark$time <- format(whaleshark$DATE, "%H:%M:%S") # create a new column with only time
View(whaleshark)
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
# You can also use read_csv to input data directly from a website URL
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
whaleshark %>% class()
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
whaleshark <-
whaleshark %>%
rename(DATETIME = DATE) %>%
mutate(DATE = as.Date(DATETIME)) %>% # adding a column to the whale shark data with just date of each detection
mutate(TIME = format(DATETIME, format = "%H:%M:%S"))
View(whaleshark)
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
scale_color_manual(values = IDcols) +
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
scale_color_manual(values = IDcols) +
xlab("Date") + ylab("Tag") +
geom_point()
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Tag") +
geom_point()
library(sf)
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 3577, remove = F)
head(whaleshark_sf)
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf()
library(ggspatial)
M150_sf <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
ggplot() +
annotation_map_tile(type = "osm", zoom = 8) +
layer_spatial(data = M150_sf)
library(mapview)
mapview(whaleshark_sf)
