with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/M150_detections.png")
dev.off()
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/M150_detections.png")
dev.off()
getwd()
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("/images/session_1/M150_detections.png")
dev.off()
getwd()
png("M150_detections.png")
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
png("M150_detections.png")
dev.off()
getwd()
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
file_path <- file.path("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/M150_detections.png")
png(file_path)
dev.off()
library(dplyr)
rm("file_path")
rm("plot")
whaleshark %>%
dplyr::select(ANIMALID, DATE, LONGITUDE, LATITUDE)# %>% # columns we want to include
# as an example, we could filter to look at the detections of only one of our whale sharks
whaleshark %>%
filter(ANIMALID == 'M-150') %>%
arrange(DATE) # arrange M-150's detections in chronological order
whaleshark %>%
group_by(ANIMALID) %>%
summarise(NumDetections = n()) # summarise number of detections per tagged shark
whaleshark <-
whaleshark %>%
rename(DATETIME = DATE) %>% # change the name of our DATETIME column
mutate(DATE = as.Date(DATETIME)) %>% # add a column to the whale shark data with just date of each detection
mutate(TIME = format(DATETIME, format = "%H:%M:%S")) # add a column for just time
library(ggplot2)
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
plot <- whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
ggsave("2_DetectionsBoxplot.png", plot, path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, scale = 1,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 6,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
plot <- whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag ID") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 5,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
plot <- whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Animal ID") + ylab("Number of detections per day") +
geom_boxplot() + # define the geometric object (how to plot it).. in this case a boxplot
theme(legend.position = "none")
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 5,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 6,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, width = 7, height = 5,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("2_DetectionsBoxplot.png", plot, width = 8, height = 5,
path = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Animal ID") + ylab("Number of detections per day") +
geom_boxplot() + # define the geometric object (how to plot it).. in this case a boxplot
theme(legend.position = "none")
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Tag") +
geom_point()
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Tag") +
geom_point() +
labs(fill = "Animal ID")
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Animal ID") +
geom_point() +
theme(legend.position = "none")
plot <-whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Animal ID") +
geom_point() +
theme(legend.position = "none")
ggsave("3_DetectionsAbacus.png", plot, width = 8, height = 5, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
library(sf)
rm("plot")
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 4326, remove = F)
head(whaleshark_sf)
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf()
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
labs(xlab = "Longitude", ylab = "Latitutde")
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
labs(x = "Longitude", y = "Latitutde")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
plot <- ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() +
labs(x = "Longitude", y = "Latitutde")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 7, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, width = 6, height = 5, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 7, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggsave("4_SpatialDetections.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
whaleshark_path <-
whaleshark_sf %>%
group_by(ANIMALID) %>% #Group by animal ID so that each animal has it's own unique path
arrange(DATETIME) %>% # arrange by the date to ensure data are in the correct sequence
summarise(do_union = FALSE) %>%
st_cast("LINESTRING") # converts our points sf to a path sf
ggplot() +
geom_sf(data = whaleshark_sf, aes(color = ANIMALID)) +
geom_sf(data = whaleshark_path, aes(color = ANIMALID))
ggplot() +
geom_sf(data = whaleshark_sf, aes(color = ANIMALID)) +
geom_sf(data = whaleshark_path, aes(color = ANIMALID)) +
labs(x = "Longitude", y = "Latitutde")
plot <- ggplot() +
geom_sf(data = whaleshark_sf, aes(color = ANIMALID)) +
geom_sf(data = whaleshark_path, aes(color = ANIMALID)) +
labs(x = "Longitude", y = "Latitutde")
ggsave("5_SpatialDetections_Path.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
library(ggspatial)
M150_sf <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
M150_path <-
M150_sf %>%
arrange(DATETIME) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
ggplot() +
annotation_map_tile(type = "osm") +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path)
ggplot() +
annotation_map_tile(type = "osm") +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
plot <- ggplot() +
annotation_map_tile(type = "osm") +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
ggsave("6_M150_SpatialDetections_Map.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path)
plot <-ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path)
ggsave("7_M150_SpatialDetections_Carto.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
plot <-ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
ggsave("7_M150_SpatialDetections_Carto.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg')
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white')
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
labs(x = "Longitude", y = "Latitude")
plot <- ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
labs(x = "Longitude", y = "Latitude")
ggsave("8_M150_SpatialDetections_EsriSat.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
esri_topo <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Topo_Map/MapServer/tile/${z}/${y}/${x}.jpeg')
ggplot() +
annotation_map_tile(type = esri_topo, zoom = 8) +
layer_spatial(data = M150_sf)  +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
plot<- ggplot() +
annotation_map_tile(type = esri_topo, zoom = 8) +
layer_spatial(data = M150_sf)  +
layer_spatial(data = M150_path) +
labs(x = "Longitude", y = "Latitude")
ggsave("9_M150_SpatialDetections_EsriTopo.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
ggplot() +
annotation_map_tile(type = 'osm', zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
annotation_scale() +
theme(legend.position = "bottom")
plot <- ggplot() +
annotation_map_tile(type = 'osm', zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
annotation_scale() +
theme(legend.position = "bottom")  +
labs(x = "Longitude", y = "Latitude")
ggsave("10_M150_SpatialDetections_Osm_Scale.png", plot, width = 8, height = 6, path =
"/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/")
library(gganimate)
ggplot() +
annotation_map_tile(type = esri_sat) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'red') +
annotation_scale(text_col = "white") +
transition_time(DATETIME)
ggplot() +
annotation_map_tile(type = esri_sat) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'red') +
annotation_scale(text_col = "white") +
transition_time(DATETIME) +
labs(x = "Longitude", y = "Latitude")
plot <- ggplot() +
annotation_map_tile(type = esri_sat) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'red') +
annotation_scale(text_col = "white") +
transition_time(DATETIME) +
labs(x = "Longitude", y = "Latitude")
anim_save("11_M150_Spatial_animate.gif", plot)
anim_save("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/11_M150_Spatial_animate.mp4", plot)
anim_save("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/11_M150_Spatial_animate.mp4", plot,
renderer = ffmpeg_renderer())
ggplot() +
annotation_map_tile(type = esri_sat) +
geom_spatial_path(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'white')  +
geom_spatial_point(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'red') +
annotation_scale(text_col = "white") +
labs(x = NULL, y = NULL) +
transition_reveal(DATETIME)
ggplot() +
annotation_map_tile(type = esri_sat) +
geom_spatial_path(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'white')  +
geom_spatial_point(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'red') +
annotation_scale(text_col = "white") +
labs(x = NULL, y = NULL) +
transition_reveal(DATETIME) +
labs(x = "Longitude", y = "Latitude")
plot <- ggplot() +
annotation_map_tile(type = esri_sat) +
geom_spatial_path(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'white')  +
geom_spatial_point(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'red') +
annotation_scale(text_col = "white") +
transition_reveal(DATETIME) +
labs(x = "Longitude", y = "Latitude")
anim_save("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/12_M150_Spatial_Animate2.gif", plot)
anim_save("/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/12_M150_Spatial_Animate2.mp4", plot)
library(mapview)
whaleshark_paths <-
whaleshark_sf %>%
arrange(DATETIME) %>%
group_by(ANIMALID) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
mapview(whaleshark_sf)
mapview(whaleshark_paths)
map1<-
mapview(whaleshark_sf,
zcol = "ANIMALID",
burst = T,
map.types = "Esri.WorldImagery",
legend = F,
homebutton = F,
cex = 5) +
mapview(whaleshark_paths,
zcol = "ANIMALID",
burst = T,
legend = F,
homebutton = F)
map1
map1@object
map1@map
mapview::mapviewOptions(fgb = FALSE) # If set to TRUE, mapview uses the 'new' way of rendering, which embeds data directly in the html. This is really helpful when attempting to visualize large datasets as it reduces the memory footprint. However, this
map1<-
mapview(whaleshark_sf,
zcol = "ANIMALID",
burst = T,
map.types = "Esri.WorldImagery",
legend = F,
homebutton = F,
cex = 5) +
mapview(whaleshark_paths,
zcol = "ANIMALID",
burst = T,
legend = F,
homebutton = F)
map1@map
library(leaflet)
map2 <-
map1@map %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F)) %>%
hideGroup(unique(whaleshark_sf$ANIMALID))
map2
mapview::mapviewOptions(fgb = FALSE) # If set to TRUE, mapview uses a file format called flatgeobuf (fgb). FGB allows the resultant map to load faster because the html output doesn't contain the data directly, moreso a snapshot of the data. This is super handy when working with large datasets! The trade off is that this optimization can sometimes leads to issues with mapping. If you're curious go ahead and try the following maps with 'fgb = TRUE' and 'fgb = FALSE' to see the difference for yourself!
mapview::mapshot(map1, url = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/13_Spatial_Interactive.html", remove_controls = NULL, selfcontained = TRUE)
mapview::mapshot(map1, url = "Spatial_Interactive.html", remove_controls = NULL, selfcontained = TRUE)
map1@object
map1@map
library(leaflet)
mapview::mapshot(map2, url = "14_Spatial_Interactive2.html", remove_controls = NULL, selfcontained = TRUE)
track <- ggplot() +
annotation_map_tile(type = esri_sat) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'red') +
annotation_scale(text_col = "white") +
transition_time(DATETIME) +
labs(x = "Longitude", y = "Latitude")
anim <- animate(track, width = 7, height = 5, units = "in", res = 250, nframes = 250, fps = 50,
render = gifski_renderer(loop = FALSE))
save_animation(animation = anim, file = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/11_M150_Spatial_animate.gif")
track <- ggplot() +
annotation_map_tile(type = esri_sat) +
geom_spatial_path(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'white')  +
geom_spatial_point(data = M150_sf, aes(x = LONGITUDE, y = LATITUDE), crs = 4326, color = 'red') +
annotation_scale(text_col = "white") +
transition_reveal(DATETIME) +
labs(x = "Longitude", y = "Latitude")
anim <- animate(track, width = 7, height = 5, units = "in", res = 250, nframes = 250, fps = 50,
render = gifski_renderer(loop = FALSE))
save_animation(animation = anim, file = "/Users/minahatayama/Desktop/OCS2024_SDMworkshop/images/session_1/12_M150_Spatial_animate2.gif")
library(tidyverse)
library(tidyverse)
library(sf)
library(mapview)
library(leaflet)
mapviewOptions(fgb=FALSE)
tagdat <-
read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/data/Whaleshark.csv') %>%
rename(DeployID = ANIMALID) %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
path <-
tagdat %>%
group_by(DeployID) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
m_111 <-
mapview(path %>% filter(DeployID %in% "M-111"), alpha = 1, color = "white", homebutton = F, legend = F, map.type = c("Esri.NatGeoWorldMap"), layer.name = "M-111") +
mapview(tagdat %>% filter(DeployID %in% "M-111"), alpha.regions = 1, alpha = 0, col.regions = "white", homebutton = F, legend = F, cex = 3, layer.name = "M-111") +
mapview(tagdat %>% filter(DeployID %in% "M-111") %>% slice(1), alpha.regions = 1, alpha = 0, col.regions = "darkgreen", homebutton = F, legend = F, layer.name = "M-111") +
mapview(tagdat %>% filter(DeployID %in% "M-111") %>% slice(n()), alpha.regions = 1, alpha = 0, col.regions = "firebrick", homebutton = F, legend = F, layer.name = "M-111")
m_129 <-
mapview(path %>% filter(DeployID %in% "M-129"), alpha = 1, color = "white", homebutton = F, legend = F, map.type = c("Esri.NatGeoWorldMap"), layer.name = "M-129") +
mapview(tagdat %>% filter(DeployID %in% "M-129"), alpha.regions = 1, alpha = 0, col.regions = "white", homebutton = F, legend = F, cex = 3, layer.name = "M-129") +
mapview(tagdat %>% filter(DeployID %in% "M-129") %>% slice(1), alpha.regions = 1, alpha = 0, col.regions = "darkgreen", homebutton = F, legend = F, layer.name = "M-129") +
mapview(tagdat %>% filter(DeployID %in% "M-129") %>% slice(n()), alpha.regions = 1, alpha = 0, col.regions = "firebrick", homebutton = F, legend = F, layer.name = "M-129")
m_130 <-
mapview(path %>% filter(DeployID %in% "M-130"), alpha = 1, color = "white", homebutton = F, legend = F, map.type = c("Esri.NatGeoWorldMap"), layer.name = "M-130") +
mapview(tagdat %>% filter(DeployID %in% "M-130"), alpha.regions = 1, alpha = 0, col.regions = "white", homebutton = F, legend = F, cex = 3, layer.name = "M-130") +
mapview(tagdat %>% filter(DeployID %in% "M-130") %>% slice(1), alpha.regions = 1, alpha = 0, col.regions = "darkgreen", homebutton = F, legend = F, layer.name = "M-130") +
mapview(tagdat %>% filter(DeployID %in% "M-130") %>% slice(n()), alpha.regions = 1, alpha = 0, col.regions = "firebrick", homebutton = F, legend = F, layer.name = "M-130")
m_149 <-
mapview(path %>% filter(DeployID %in% "M-149"), alpha = 1, color = "white", homebutton = F, legend = F, map.type = c("Esri.NatGeoWorldMap"), layer.name = "M-149") +
mapview(tagdat %>% filter(DeployID %in% "M-149"), alpha.regions = 1, alpha = 0, col.regions = "white", homebutton = F, legend = F, cex = 3, layer.name = "M-149") +
mapview(tagdat %>% filter(DeployID %in% "M-149") %>% slice(1), alpha.regions = 1, alpha = 0, col.regions = "darkgreen", homebutton = F, legend = F, layer.name = "M-149") +
mapview(tagdat %>% filter(DeployID %in% "M-149") %>% slice(n()), alpha.regions = 1, alpha = 0, col.regions = "firebrick", homebutton = F, legend = F, layer.name = "M-149")
m_150 <-
mapview(path %>% filter(DeployID %in% "M-150"), alpha = 1, color = "white", homebutton = F, legend = F, map.type = c("Esri.NatGeoWorldMap"), layer.name = "M-150") +
mapview(tagdat %>% filter(DeployID %in% "M-150"), alpha.regions = 1, alpha = 0, col.regions = "white", homebutton = F, legend = F, cex = 3, layer.name = "M-150") +
mapview(tagdat %>% filter(DeployID %in% "M-150") %>% slice(1), alpha.regions = 1, alpha = 0, col.regions = "darkgreen", homebutton = F, legend = F, layer.name = "M-150") +
mapview(tagdat %>% filter(DeployID %in% "M-150") %>% slice(n()), alpha.regions = 1, alpha = 0, col.regions = "firebrick", homebutton = F, legend = F, layer.name = "M-150")
m_156 <-
mapview(path %>% filter(DeployID %in% "M-156"), alpha = 1, color = "white", homebutton = F, legend = F, map.type = c("Esri.NatGeoWorldMap"), layer.name = "M-156") +
mapview(tagdat %>% filter(DeployID %in% "M-156"), alpha.regions = 1, alpha = 0, col.regions = "white", homebutton = F, legend = F, cex = 3, layer.name = "M-156") +
mapview(tagdat %>% filter(DeployID %in% "M-156") %>% slice(1), alpha.regions = 1, alpha = 0, col.regions = "darkgreen", homebutton = F, legend = F, layer.name = "M-156") +
mapview(tagdat %>% filter(DeployID %in% "M-156") %>% slice(n()), alpha.regions = 1, alpha = 0, col.regions = "firebrick", homebutton = F, legend = F, layer.name = "M-156")
(m_111 + m_129 + m_130 + m_149 + m_150 + m_156)@map %>%
addLayersControl(
# overlayGroups = c("Esri.NatGeoWorldMap","Esri.WorldImagery"),
baseGroups = c("M-111", "M-129", "M-130", "M-149", "M-150", "M-156"),
options = layersControlOptions(collapsed = FALSE))
library(aniMotum)
raw_data <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/data/Whaleshark.csv')
head(raw_data)
# Using transmute from the Dplyr package
tagdat <- raw_data %>%
dplyr::transmute(id = ANIMALID,
date = DATE,
lc= ARGOSCLASS,
lon = LONGITUDE,
lat = LATITUDE)
tagdat %>%
group_by(id, lc) %>%
summarise(num_pos = n()) %>%
ggplot(aes(x = id, y = num_pos, fill = lc)) +
geom_col(position = "fill") +
labs(x = "Tag ID", y = "Proportion of fixes", fill = "Location\nClass") +
theme_bw()
# Fitting a Continuous-time move persistence (MP) model to our data
fit <-
fit_ssm(x = tagdat,
vmax = 1.5, ## maximum speed of whale sharks (in m/s)
model = "mp", ## Move persistence model
time.step = 12, ## predict positions every 12 hours
control = ssm_control(verbose = 0)) ## Lets turn off the progress text
fit
fit2 <-
fit_ssm(x = tagdat,
vmax = 1.5, ## maximum speed of whale sharks (in m/s)
model = "mp", ## Move persistence model
time.step = 48, ## predict positions every 24 hours
spdf = FALSE, ## turn off the pre-filter step
control = ssm_control(verbose = 0)) ## Lets turn off the progress text
fit2
fit3 <- tagdat %>%
dplyr::filter(id %in% c("M-150", "M-130")) %>%
fit_ssm(vmax = 1.5, ## maximum speed of whale sharks (in m/s)
model = "mp", ## Move persistence model
time.step = 48, ## predict positions every 24 hours
spdf = FALSE, ## turn off the pre-filter step
control = ssm_control(verbose = 0)) ## Lets turn off the progress text
summary(fit3)
plot(fit3,
what = "fitted", ## what component of the model to plot ('fitted', 'predicted' or 'rerouted')
type = 2, ## type of plot to make
pages = 1,
ncol = 2)
plot(fit3,
what = "predicted",
type = 2,
pages = 1,
ncol = 2)
plot(fit3,
what = "predicted",
type = 3,
pages = 1,
ncol = 2,
normalise = TRUE)
plot(fit3,
what = "predicted",
type = 4,
pages = 1,
ncol = 2,
normalise = TRUE)
# Lets plot our own version of the predicted component using mapview
pred_data <- grab(fit3,
what = "predicted",
normalise = TRUE)
# Lets convert this data frame into a point dataset using `sf`
library(sf)
pred_sf <-
pred_data %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, remove = F)
pred_path <-
pred_sf %>%
group_by(id) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
