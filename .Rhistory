annotation_map_tile(type = "osm", zoom = 8) +
layer_spatial(data = M150_sf)
library(mapview)
mapview(whaleshark_sf)
# Load the whale shark data using the 'read.csv' function directly from github
whaleshark <- read.csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv', header = TRUE)
summary(whaleshark) # Provides a summary of the data frame
class(whaleshark) # tells us what form 'whaleshark' is in (data frame)
# Now lets explore what form each of our columns are in
class(whaleshark$ANIMALID) # character
class(whaleshark$DATE) # character
class(whaleshark$LONGITUDE) # numeric
class(whaleshark$LATITUDE) # numeric
class(whaleshark$ARGOSCLASS) # character
#First, lets load up lubridate using the library package.
library(lubridate)
# Now we can use the 'ymd_hms' function to reformat our 'DATE' field as a POSIXct.
whaleshark$DATE <- ymd_hms(whaleshark$DATE)
# Or we can use the parse_date_time function
whaleshark$DATE <- parse_date_time(whaleshark$DATE, "Ymd HMS")
# We can check if it worked by using the class function
class(whaleshark$DATE)
# Lets practice by creating a new field with the time zone as AEST.
whaleshark$LOCAL_DATE_TIME <- with_tz(whaleshark$DATE, tzone = "Australia/Brisbane")
whaleshark$date <- date(whaleshark$DATE) # Create a new column with only date
whaleshark$time <- format(whaleshark$DATE, "%H:%M:%S") # create a new column with only time
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
# You can also use read_csv to input data directly from a website URL
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
whaleshark %>% View() # opens data in a new window
whaleshark %>% head() # first 6 rows by default
whaleshark %>% tail(10) # specify we want to look at the last 10 rows
whaleshark %>% nrow() # number of rows in the data frame
whaleshark %>% ncol() # number of columns in the data frame
whaleshark %>% str() # provides internal structure of an R object
whaleshark %>% summary() # provides result summary of the data frame
# pipes can be used for single column within data frames
whaleshark$DATE %>% class()
whaleshark %>%
subset(ANIMALID == "M-150") %>% # subset dataset to include only the whale shark 'M-150'
nrow() # count number of rows (i.e. detections) from 'M-150'
whaleshark %>% # take the whale shark df
mutate(date = date(DATE)) %>% # then create a new column called date from the date time column
subset(ANIMALID == "M-150") %>% # then subset to just the data from shark M-150
with(table(date)) %>% # create a table with the number of detections per day
plot(type = 'b', xlab = "Date", ylab = "Number of detections", col = 'lightblue') # plot detections over time
library(dplyr)
library(dplyr)
whaleshark %>%
dplyr::select(ANIMALID, DATE, LONGITUDE, LATITUDE)# %>% # columns we want to include
# as an example, we could filter to look at the detections of only one of our whale sharks
whaleshark %>%
filter(ANIMALID == 'M-150') %>%
arrange(DATE) # arrange M-150's detections in chronological order
whaleshark %>%
group_by(ANIMALID) %>%
summarise(NumDetections = n()) # summarise number of detections per tagged shark
library(ggplot2)
help.search("geom_", package = "ggplot2")
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
View(whaleshark)
whaleshark <-
whaleshark %>%
rename(DATETIME = DATE) %>%
mutate(DATE = as.Date(DATETIME)) %>% # adding a column to the whale shark data with just date of each detection
mutate(TIME = format(DATETIME, format = "%H:%M:%S"))
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
whaleshark %>%
group_by(ANIMALID, DATE) %>%
summarise(daily_detections = n()) %>% # use summarise to calculate numbers of detections per day per animal
ggplot(mapping = aes(x = ANIMALID, y = daily_detections, color = ANIMALID)) + # define the aesthetic map (what to plot)
xlab("Tag") + ylab("Number of detections per day") +
geom_boxplot() # define the geometric object (how to plot it).. in this case a boxplot
whaleshark %>%
ggplot(mapping = aes(x = DATE, y = ANIMALID, color = ANIMALID)) +
xlab("Date") + ylab("Tag") +
geom_point()
library(sf)
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 4326, remove = F)
head(whaleshark_sf)
ggplot(whaleshark_sf, aes(color = ANIMALID)) +
geom_sf() #Can we connect these points with lines?
whaleshark_path <-
whaleshark %>%
group_by(ANIMALID) %>% #Group by animal ID so that each animal has it's own unique path
arrange(DATETIME) %>% # arrange by the date to ensure data are in the correct sequence
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
whaleshark_path <-
whaleshark %>%
group_by(ANIMALID) %>% #Group by animal ID so that each animal has it's own unique path
#arrange(DATETIME) %>% # arrange by the date to ensure data are in the correct sequence
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
whaleshark_path <-
whaleshark_sf %>%
group_by(ANIMALID) %>% #Group by animal ID so that each animal has it's own unique path
arrange(DATETIME) %>% # arrange by the date to ensure data are in the correct sequence
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
ggplot() +
geom_sf(whaleshark_sf, aes(color = ANIMALID))
ggplot(whaleshark_path, aes(color = ANIMALID)) +
geom_sf()
ggplot() +
geom_sf(data = whaleshark_sf, aes(color = ANIMALID))
ggplot() +
geom_sf(data = whaleshark_sf, aes(color = ANIMALID)) +
geom_sf(data = whaleshark_path, aes(color = ANIMALID))
library(ggspatial)
M150_sf <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
M150_path <-
M150_sf %>%
arrange(DATETIME) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
ggplot() +
annotation_map_tile(type = "osm") +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path)
ggplot() +
annotation_map_tile(type = "cartolight", zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path)
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg') # Same link as singapore workshop
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg') # Same link as singapore workshop
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
# You can also use read_csv to input data directly from a website URL
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
whaleshark <-
whaleshark %>%
rename(DATETIME = DATE) %>% # change the name of our DATETIME column
mutate(DATE = as.Date(DATETIME)) %>% # add a column to the whale shark data with just date of each detection
mutate(TIME = format(DATETIME, format = "%H:%M:%S")) # add a column for just time
library(ggplot2)
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 4326, remove = F)
library(sf)
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 4326, remove = F)
whaleshark_path <-
whaleshark_sf %>%
group_by(ANIMALID) %>% #Group by animal ID so that each animal has it's own unique path
arrange(DATETIME) %>% # arrange by the date to ensure data are in the correct sequence
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
library(ggspatial)
M150_sf <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
M150_path <-
M150_sf %>%
arrange(DATETIME) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 12) +
layer_spatial(data = M150_sf, color = 'white')
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg') # Same link as singapore workshop
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 12) +
layer_spatial(data = M150_sf, color = 'white')
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white')
esri_topo <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Topo_Map/MapServer/tile/${z}/${y}/${x}.jpeg')
ggplot() +
annotation_map_tile(type = esri_topo, zoom = 8) +
layer_spatial(data = M150_sf)  +
layer_spatial(data = M150_path)
ggplot() +
annotation_map_tile(type = 'osm', zoom = 8) +
layer_spatial(data = M150_sf) +
layer_spatial(data = M150_path) +
annotation_scale() +
theme(legend.position = "bottom")
library(gganimate)
install.packages('gganimate')
install.packages("gganimate")
library(gganimate)
?gganimate
?`gganimate-package`
View(M150_sf)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
transition_time(DATETIME)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
transition_states(DATETIME)
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
# You can also use read_csv to input data directly from a website URL
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
whaleshark <-
whaleshark %>%
rename(DATETIME = DATE) %>% # change the name of our DATETIME column
mutate(DATE = as.Date(DATETIME)) %>% # add a column to the whale shark data with just date of each detection
mutate(TIME = format(DATETIME, format = "%H:%M:%S")) # add a column for just time
library(ggplot2)
library(sf)
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 4326, remove = F)
whaleshark_path <-
whaleshark_sf %>%
group_by(ANIMALID) %>% #Group by animal ID so that each animal has it's own unique path
arrange(DATETIME) %>% # arrange by the date to ensure data are in the correct sequence
summarise(do_union = FALSE) %>%
st_cast("LINESTRING") # converts our points sf to a path sf
library(ggspatial)
M150_sf <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
M150_path <-
M150_sf %>%
arrange(DATETIME) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
library(gganimate)
install.packages('gifski')
install.packages('av')
# Load 'tidyverse' - which we will use for data cleaning, filtering, and visualization
library(tidyverse)
# whaleshark <- read_csv('/location of data/Whalesharks_Maldives.csv')
# You can also use read_csv to input data directly from a website URL
whaleshark <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
# Note, right now we are reading over our previous 'whaleshark' data frame. So any manipulations you've done to the data frame will be reset.
library(dplyr)
whaleshark <-
whaleshark %>%
rename(DATETIME = DATE) %>% # change the name of our DATETIME column
mutate(DATE = as.Date(DATETIME)) %>% # add a column to the whale shark data with just date of each detection
mutate(TIME = format(DATETIME, format = "%H:%M:%S")) # add a column for just time
library(ggplot2)
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 4326, remove = F)
library(sf)
whaleshark_sf <-
whaleshark %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs= 4326, remove = F)
whaleshark_path <-
whaleshark_sf %>%
group_by(ANIMALID) %>% #Group by animal ID so that each animal has it's own unique path
arrange(DATETIME) %>% # arrange by the date to ensure data are in the correct sequence
summarise(do_union = FALSE) %>%
st_cast("LINESTRING") # converts our points sf to a path sf
library(ggspatial)
M150_sf <- whaleshark_sf %>%
filter(ANIMALID == 'M-150')
M150_path <-
M150_sf %>%
arrange(DATETIME) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
library(gganimate)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
transition_states(DATETIME)
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg') # Same link as singapore workshop
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
transition_states(DATETIME)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = M150_sf, color = 'white')  +
layer_spatial(data = M150_path, color = 'white') +
transition_time(DATETIME)
library(mapview)
mapview::mapviewOptions(fgb = FALSE)
mapview(whaleshark_sf)
mapview(whaleshark_sf)
whaleshark_paths <-
whaleshark_sf %>%
arrange(DATETIME) %>%
group_by(ANIMALID) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
map1<-
mapview(whaleshark_sf,
zcol = "ANIMALID",
burst = T,
map.types = "Esri.WorldImagery",
legend = F,
homebutton = F,
cex = 5) +
mapview(whaleshark_paths,
zcol = "ANIMALID",
burst = T,
legend = F,
homebutton = F)
map1@object
map1@map
library(leaflet)
map2 <-
map1@map %>%
addLayersControl(
baseGroups = unique(whaleshark_sf$ANIMALID),
options = layersControlOptions(collapsed = F)) %>%
hideGroup(unique(whaleshark_sf$ANIMALID))
map2
mapview::mapshot(map2, url = "Whaleshark_interactive_map.html", remove_controls = NULL, selfcontained = TRUE)
install.packages('webshot')
mapview::mapshot(map2, url = "Whaleshark_interactive_map.html", remove_controls = NULL, selfcontained = TRUE)
mapview(whaleshark_sf)
whaleshark_paths <-
whaleshark_sf %>%
arrange(DATETIME) %>%
group_by(ANIMALID) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
mapview(whaleshark_paths)
map1@map
View(M150_path)
View(M150_sf)
View(M150_path)
library(tidyverse)
library(aniMotum)
raw_data <- read_csv('https://raw.githubusercontent.com/vinayudyawer/OCS2024_SDMworkshop/main/Data/Whalesharks_Maldives.csv')
head(raw_data)
# Using transmute from the Dplyr package
tagdat <- raw_data %>%
dplyr::transmute(id = ANIMALID,
date = DATE,
lc= ARGOSCLASS,
lon = LONGITUDE,
lat = LATITUDE)
head(tagdat)
tagdat %>%
group_by(id, lc) %>%
summarise(num_pos = n()) %>%
ggplot(aes(x = id, y = num_pos, fill = lc)) +
geom_col(position = "fill") +
labs(x = "Tag ID", y = "Proportion of fixes", fill = "Location\nClass") +
theme_bw()
fit <-
fit_ssm(x = tagdat,
vmax = 1.5, ## maximum speed of whale sharks (in m/s)
model = "mp", ## Move persistence model
time.step = 24) ## predict positions every 24 hours
head(fit)
fit2 <-
fit_ssm(x = tagdat,
vmax = 1.5, ## maximum speed of whale sharks (in m/s)
model = "mp", ## Move persistence model
time.step = 48) ## predict positions every 48 hours
head(fit2)
fit3 <- tagdat %>%
dplyr::filter(id %in% c("M-130", "M-150")) %>%
fit_ssm(vmax = 1.5, ## maximum speed of whale sharks (in m/s)
model = "mp", ## Move persistence model
time.step = 48) ## predict positions every 48 hours
plot(fit3,
what = "fitted", ## what component of the model to plot ('fitted', 'predicted' or 'rerouted')
type = 2, ## type of plot to make
pages = 1,
ncol = 3)
resid <- osar(fit3)
## Lets check our model fit for both tracks
plot(resid, type = "qq")
plot(resid, type = "acf")
plot(fit3,
what = "predicted",
type = 2,
pages = 1,
ncol = 3)
plot(fit3,
what = "predicted",
type = 3,
pages = 1,
ncol = 3,
normalise = TRUE)
plot(fit3,
what = "predicted",
type = 4,
pages = 1,
ncol = 3,
normalise = TRUE)
# Lets plot our own version of the predicted component using mapview
pred_data <- grab(fit3,
what = "predicted",
as_sf = TRUE,
normalise = TRUE)
# Lets convert the point dataset into a path using the 'sf' package
library(sf)
pred_path <-
pred_data %>%
group_by(id) %>%
summarise(do_union = FALSE) %>%
st_cast("LINESTRING")
# Now lets use our lovely mapview and leaflet knowledge from session one to plot a nice, interactive plot of move persistence data!
library(leaflet)
library(mapview)
mapview::mapviewOptions(fgb = FALSE)
color_palette <- colorRampPalette(hcl.colors(10, palette = "Reds 3"))
m_130 <-
mapview(pred_path %>% filter(id %in% "M-130"), alpha = 1, color = "white", homebutton = F,
legend = F, map.type = c("Esri.WorldImagery"), layer.name = "M-130") +
mapview(pred_data %>% filter(id %in% "M-130"), alpha.regions = 1, alpha = 0, zcol = "g",
homebutton = F, legend = F, cex = 3, layer.name = "M-130", col.regions = color_palette(93)) +
mapview(pred_data %>% filter(id %in% "M-130") %>% slice(1), alpha.regions = 1, alpha = 0,
col.regions = "darkgreen", homebutton = F, legend = F, layer.name = "M-130") +
mapview(pred_data %>% filter(id %in% "M-130") %>% slice(n()), alpha.regions = 1, alpha = 0,
col.regions = "firebrick", homebutton = F, legend = F, layer.name = "M-130")
m_150 <-
mapview(pred_path %>% filter(id %in% "M-150"), alpha = 1, color = "white", homebutton = F,
legend = F, map.type = c("Esri.WorldImagery"), layer.name = "M-150") +
mapview(pred_data %>% filter(id %in% "M-150"), alpha.regions = 1, alpha = 0, zcol = "g",
homebutton = F, legend = F, cex = 3, layer.name = "M-150", col.regions = color_palette(54)) +
mapview(pred_data %>% filter(id %in% "M-150") %>% slice(1), alpha.regions = 1, alpha = 0,
col.regions = "darkgreen", homebutton = F, legend = F, layer.name = "M-150") +
mapview(pred_data %>% filter(id %in% "M-150") %>% slice(n()), alpha.regions = 1, alpha = 0,
col.regions = "firebrick", homebutton = F, legend = F, layer.name = "M-150")
mm <-
(m_130 + m_150)@map %>%
addLayersControl(
baseGroups = c("M-130", "M-150"),
options = layersControlOptions(collapsed = FALSE)) %>%
addLegend(colors = color_palette(11),
labels = round(seq(0, 1, by = 0.1), 2),
title = "g", opacity = 1)
mm
View(pred_data)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, color = id)  +
layer_spatial(data = pred_path, color = id) #+
library(ggspatial)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, color = id)  +
layer_spatial(data = pred_path, color = id) #+
esri_sat <- paste0('https://services.arcgisonline.com/arcgis/rest/services/',
'World_Imagery/MapServer/tile/${z}/${y}/${x}.jpeg')
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, color = id)  +
layer_spatial(data = pred_path, color = id) #+
View(pred_data)
View(pred_path)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data) +
layer_spatial(data = pred_path) #+
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path) #+
View(pred_data)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path, aes(color = id)) #+
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path, aes(color = id)) +
transition_time(DATETIME)
library(gganimate)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path, aes(color = id)) +
transition_time(DATETIME)
View(pred_data)
ggplot() +
annotation_map_tile(type = esri_sat, zoom = 8) +
layer_spatial(data = pred_data, aes(color = id)) +
layer_spatial(data = pred_path, aes(color = id)) +
transition_time(date)
View(pred_data)
View(tagdat)
View(pred_data)
